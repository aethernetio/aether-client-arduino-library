# This is the name of the workflow, visible on GitHub UI.
name: test

# Here we tell GitHub to run the workflow when a commit
# is pushed or a Pull Request is opened.
on: 
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.
jobs:
  # This is the name of the job - can be whatever.
  test-matrix:

    # Here we tell GitHub that the jobs must be determined
    # dynamically depending on a matrix configuration.
    strategy:
      matrix:
        # The matrix will produce one job for each configuration
        # parameter of type `arduino-platform`, in this case a
        # total of 2.
        arduino-platform: ["esp32:esp32"]
        # This is usually optional but we need to statically define the
        # FQBN of the boards we want to test for each platform. In the
        # future the CLI might automatically detect and download the core
        # needed to compile against a certain FQBN, at that point the
        # following `include` section will be useless.
        include:
          # This works like this: when the platform is "esp32:esp32", the
          # variable `fqbn` is set to "esp32:esp32:esp32wroverkit".
          - arduino-platform: "esp32:esp32"
            fqbn: "esp32:esp32:esp32wroverkit"
            platform-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
            extra-arduino-cli-args: --build-property build.partitions=no_ota --build-property upload.maximum_size=2097152 --build-property compiler.optimization_flags=-O1

    # This is the platform GitHub will use to run our workflow, we
    # pick Windows for no particular reason.
    runs-on: ubuntu-latest

    # This is the list of steps this job will run.
    steps:
      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@v4

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@master

      # We then install the platform, which one will be determined
      # dynamically by the build matrix.
      - name: Install platform
        run: |
          arduino-cli core update-index
          arduino-cli core install ${{ matrix.arduino-platform }}

      # Finally, we compile the sketch, using the FQBN that was set
      # in the build matrix.
      - name: Compile all examples using the bash script arduino-test-compile.sh
        env:
          # Passing parameters to the script by setting the appropriate ENV_* variables.
          ENV_ARDUINO_BOARD_FQBN: ${{ matrix.fqbn }}
          ENV_PLATFORM_URL: ${{ matrix.platform-url }}
          ENV_REQUIRED_LIBRARIES: ${{ env.REQUIRED_LIBRARIES }}
          ENV_SKETCHES_EXCLUDE: ${{ matrix.sketches-exclude }}
          ENV_BUILD_PROPERTIES: ${{ toJson(matrix.build-properties) }}
          ENV_EXTRA_ARDUINO_CLI_ARGS: ${{ matrix.extra-arduino-cli-args }}
          ENV_SKETCH_NAMES: "*.ino"
          ENV_SKETCH_NAMES_FIND_START: .
          ENV_SAVE_GENERATED_FILES: true
          ENV_DEBUG_COMPILE: true
          ENV_DEBUG_INSTALL: true
        run: |
          wget --quiet https://github.com/aethernetio/aether-client-arduino-library/main/arduino-test-compile.sh
            ls -l arduino-test-compile.sh
            chmod +x arduino-test-compile.sh
            ./arduino-test-compile.sh        

      - name: Upload_Cloud
        uses: actions/upload-artifact@v4
        with:
          name: Aether_Cloud_esp32_release
          path: "examples/Cloud/build/esp32.esp32.esp32wroverkit/*.bin"
          
      - name: Upload_KeyLed
        uses: actions/upload-artifact@v4
        with:
          name: Aether_KeyLed_esp32_release
          path: "examples/KeyLed/build/esp32.esp32.esp32wroverkit/*.bin"
          
      - name: Upload_Registered
        uses: actions/upload-artifact@v4
        with:
          name: Aether_Registered_esp32_release
          path: "examples/Registered/build/esp32.esp32.esp32wroverkit/*.bin"