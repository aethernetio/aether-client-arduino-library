cmake_minimum_required(VERSION 3.16.0)

list(APPEND libhydrogen_srcs
            hydrogen.c)

if(CM_PLATFORM STREQUAL "X86_QT" OR
   CM_PLATFORM STREQUAL "X86_MSVS" OR
   CM_PLATFORM STREQUAL "ARM_MAC" OR
   CM_PLATFORM STREQUAL "X86_MAC" OR
   CM_PLATFORM STREQUAL "X86_GCC")
    
    project(hydrogen VERSION 1.0 LANGUAGES CXX)

    add_library(${PROJECT_NAME} STATIC  ${libhydrogen_srcs})
    target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

elseif(CM_PLATFORM STREQUAL "OTHER")
    #Other platforms

else()
    idf_build_get_property(CM_PLATFORM CM_PLATFORM)
    if(CM_PLATFORM STREQUAL "ESP32")
    #ESP32 CMake
    set(include_dirs "../../"
                     "impl"
                     "impl/gimli-core"
                     "impl/random")
                 
    idf_component_register(SRCS
                           ${libhydrogen_srcs}
                           INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
                           INCLUDE_DIRS ${include_dirs}
                           REQUIRES unity esp_timer)
    else()
    #ERROR
    message(SEND_ERROR "You must specify the CMAKE version!")
    endif()
endif()

if(CM_PLATFORM STREQUAL "X86_QT" OR
   CM_PLATFORM STREQUAL "X86_MSVS" OR
   CM_PLATFORM STREQUAL "ARM_MAC" OR
   CM_PLATFORM STREQUAL "X86_MAC" OR
   CM_PLATFORM STREQUAL "X86_GCC")
   
set_target_properties(${PROJECT_NAME}
    PROPERTIES 
        C_STANDARD          17
        C_STANDARD_REQUIRED ON
        PUBLIC_HEADER       "${${PROJECT_NAME}_PUBLIC_HEADERS}"
        EXPORT_NAME         framework
)

target_compile_options(${PROJECT_NAME}
    PRIVATE
        # Clang
        $<$<C_COMPILER_ID:Clang>:
            #-Wcast-align
            #-Wcast-qual
            #-Wconversion
            #-Wexit-time-destructors                            
            #-Wglobal-constructors
            #-Wmissing-noreturn
            #-Wmissing-prototypes
            #-Wno-missing-braces
            #-Wold-style-cast
            #-Wshadow
            #-Wweak-vtables
            #-Werror
            #-Wall
            #$<$<VERSION_GREATER_EQUAL:$<C_COMPILER_VERSION>,8.0.0>:-Wextra-semi-stmt>
        >
        
        # GCC
        $<$<C_COMPILER_ID:GNU>:
            #-Waddress
            #-Waggregate-return
            #-Wformat-nonliteral
            #-Wformat-security
            #-Wformat
            #-Winit-self
            #-Wmissing-declarations
            #-Wmissing-include-dirs
            #-Wno-multichar
            #-Wno-parentheses
            #-Wno-type-limits
            #-Wno-unused-parameter
            #-Wunreachable-code
            #-Wwrite-strings
            #-Wpointer-arith
            #-Werror
            #-Wall
        >

        # MSVC
        $<$<C_COMPILER_ID:MSVC>:
            # /Wall
        >
)

## Target installation
install(TARGETS   ${PROJECT_NAME}
    EXPORT        ${PROJECT_NAME}Targets
    ARCHIVE       DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY       DESTINATION ${CMAKE_INSTALL_LIBDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
    COMPONENT     library
)

## Target's cmake files: targets export
install(EXPORT  ${PROJECT_NAME}Targets
    NAMESPACE   ${PROJECT_NAME}::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

## Target's cmake files: config and version config for find_package()
install(FILES   ${PROJECT_NAME}Config.cmake
                ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)
endif()
